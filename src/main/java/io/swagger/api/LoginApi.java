/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Product;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-25T13:53:42.910Z[GMT]")
@Validated
public interface LoginApi {

    @Operation(summary = "Authorizes the user.", description = "Authorizes the user and receives the contents of his basket.", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")})
    @RequestMapping(value = "/login",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Product>> getLogin(@Parameter(in = ParameterIn.HEADER, description = "User's email", required = true, schema = @Schema()) @RequestHeader(value = "email", required = true) String email, @Parameter(in = ParameterIn.HEADER, description = "User's password", required = true, schema = @Schema()) @RequestHeader(value = "password", required = true) String password, HttpServletResponse response);

    @Operation(summary = "Registers the user in the system.", description = "Registers the user in the system, and the basket specified in the request is ignored, it facilitates the transfer of objects from the site to the main service.", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Request")})
    @RequestMapping(value = "/login",
            method = RequestMethod.POST)
    ResponseEntity<Void> postLogin(@Parameter(in = ParameterIn.DEFAULT, description = "User information.", schema = @Schema()) @Valid @RequestBody User body);

    @Operation(summary = "Update user profile", description = "Finds the user in the database and updates all fields to the specified ones.", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK"),

            @ApiResponse(responseCode = "400", description = "Bad Request")})
    @RequestMapping(value = "/login",
            method = RequestMethod.PUT)
    ResponseEntity<Void> putLogin(@Parameter(in = ParameterIn.HEADER, description = "User's email", required = true, schema = @Schema()) @RequestHeader(value = "email", required = true) String email, @Parameter(in = ParameterIn.HEADER, description = "User's password", required = true, schema = @Schema()) @RequestHeader(value = "password", required = true) String password, @Parameter(in = ParameterIn.DEFAULT, description = "New user information.", schema = @Schema()) @Valid @RequestBody User body);
}